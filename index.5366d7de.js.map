{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCKA,IAAM,EAAY,SAAS,aAAa,CAAC,gBACnC,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAqB,SAAS,aAAa,CAAC,kBAC5C,EAAqB,SAAS,aAAa,CAAC,kBAC9C,EAAW,EAAU,IAAI,CAAC,MAAM,CAChC,EAAc,EAAU,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAEnD,SAAS,IACP,EAAW,EAAU,IAAI,CAAC,MAAM,CAChC,EAAc,EAAU,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAE3C,AAfa,KAeb,EACF,EAAgB,YAAY,CAAC,WAAY,CAAA,GAEzC,EAAgB,eAAe,CAAC,YAG9B,AApBa,IAoBb,EACF,EAAgB,YAAY,CAAC,WAAY,CAAA,GAEzC,EAAgB,eAAe,CAAC,YAG9B,AA3Ba,KA2Bb,EACF,EAAmB,YAAY,CAAC,WAAY,CAAA,GAE5C,EAAmB,eAAe,CAAC,YAGjC,AAhCa,IAgCb,EACF,EAAmB,YAAY,CAAC,WAAY,CAAA,GAE5C,EAAmB,eAAe,CAAC,WAEvC,CAEA,EAAgB,gBAAgB,CAAC,QAAS,WACxC,GAAI,EAAW,GAAI,CACjB,IAAM,EAAS,EAAU,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAE3C,EAAU,MAAM,CAAC,GACjB,GACF,CACF,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WACpC,EAAW,IACb,EAAU,IAAI,CAAC,EAAU,IAAI,CAAC,MAAM,CAAG,EAAE,CAAC,MAAM,GAEhD,IAEJ,GAEA,EAAmB,gBAAgB,CAAC,QAAS,WACvC,EAAc,KACf,EAAG,EAAU,IAAI,EAAE,OAAO,CAAC,SAAC,CAA5B,EACC,IAAM,EAAS,SAAS,aAAa,CAAC,MAEtC,EAAI,MAAM,CAAC,EACb,GAEA,IAEJ,GAEA,EAAmB,gBAAgB,CAAC,QAAS,WACvC,EAAc,IACf,EAAG,EAAU,IAAI,EAAE,OAAO,CAAC,SAAC,CAA5B,EACC,EAAI,gBAAgB,CAAC,MAAM,EAC7B,GAEA,IAEJ","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar MAX_LENGTH = 10;\nvar MIN_LENGTH = 2;\nvar fieldBody = document.querySelector(\".field tbody\");\nvar appendRowButton = document.querySelector(\".append-row\");\nvar removeRowButton = document.querySelector(\".remove-row\");\nvar appendColumnButton = document.querySelector(\".append-column\");\nvar removeColumnButton = document.querySelector(\".remove-column\");\nvar rowCount = fieldBody.rows.length;\nvar columnCount = fieldBody.rows[0].children.length;\nfunction updateButtons() {\n    rowCount = fieldBody.rows.length;\n    columnCount = fieldBody.rows[0].children.length;\n    if (rowCount === MAX_LENGTH) appendRowButton.setAttribute(\"disabled\", true);\n    else appendRowButton.removeAttribute(\"disabled\");\n    if (rowCount === MIN_LENGTH) removeRowButton.setAttribute(\"disabled\", true);\n    else removeRowButton.removeAttribute(\"disabled\");\n    if (columnCount === MAX_LENGTH) appendColumnButton.setAttribute(\"disabled\", true);\n    else appendColumnButton.removeAttribute(\"disabled\");\n    if (columnCount === MIN_LENGTH) removeColumnButton.setAttribute(\"disabled\", true);\n    else removeColumnButton.removeAttribute(\"disabled\");\n}\nappendRowButton.addEventListener(\"click\", function() {\n    if (rowCount < 10) {\n        var newRow = fieldBody.rows[0].cloneNode(true);\n        fieldBody.append(newRow);\n        updateButtons();\n    }\n});\nremoveRowButton.addEventListener(\"click\", function() {\n    if (rowCount > 2) {\n        fieldBody.rows[fieldBody.rows.length - 1].remove();\n        updateButtons();\n    }\n});\nappendColumnButton.addEventListener(\"click\", function() {\n    if (columnCount < 10) {\n        _to_consumable_array(fieldBody.rows).forEach(function(row) {\n            var column = document.createElement(\"td\");\n            row.append(column);\n        });\n        updateButtons();\n    }\n});\nremoveColumnButton.addEventListener(\"click\", function() {\n    if (columnCount > 2) {\n        _to_consumable_array(fieldBody.rows).forEach(function(row) {\n            row.lastElementChild.remove();\n        });\n        updateButtons();\n    }\n});\n\n//# sourceMappingURL=index.5366d7de.js.map\n","'use strict';\n\nconst MAX_LENGTH = 10;\nconst MIN_LENGTH = 2;\n\nconst fieldBody = document.querySelector('.field tbody');\nconst appendRowButton = document.querySelector('.append-row');\nconst removeRowButton = document.querySelector('.remove-row');\nconst appendColumnButton = document.querySelector('.append-column');\nconst removeColumnButton = document.querySelector('.remove-column');\nlet rowCount = fieldBody.rows.length;\nlet columnCount = fieldBody.rows[0].children.length;\n\nfunction updateButtons() {\n  rowCount = fieldBody.rows.length;\n  columnCount = fieldBody.rows[0].children.length;\n\n  if (rowCount === MAX_LENGTH) {\n    appendRowButton.setAttribute('disabled', true);\n  } else {\n    appendRowButton.removeAttribute('disabled');\n  }\n\n  if (rowCount === MIN_LENGTH) {\n    removeRowButton.setAttribute('disabled', true);\n  } else {\n    removeRowButton.removeAttribute('disabled');\n  }\n\n  if (columnCount === MAX_LENGTH) {\n    appendColumnButton.setAttribute('disabled', true);\n  } else {\n    appendColumnButton.removeAttribute('disabled');\n  }\n\n  if (columnCount === MIN_LENGTH) {\n    removeColumnButton.setAttribute('disabled', true);\n  } else {\n    removeColumnButton.removeAttribute('disabled');\n  }\n}\n\nappendRowButton.addEventListener('click', () => {\n  if (rowCount < 10) {\n    const newRow = fieldBody.rows[0].cloneNode(true);\n\n    fieldBody.append(newRow);\n    updateButtons();\n  }\n});\n\nremoveRowButton.addEventListener('click', () => {\n  if (rowCount > 2) {\n    fieldBody.rows[fieldBody.rows.length - 1].remove();\n\n    updateButtons();\n  }\n});\n\nappendColumnButton.addEventListener('click', () => {\n  if (columnCount < 10) {\n    [...fieldBody.rows].forEach((row) => {\n      const column = document.createElement('td');\n\n      row.append(column);\n    });\n\n    updateButtons();\n  }\n});\n\nremoveColumnButton.addEventListener('click', () => {\n  if (columnCount > 2) {\n    [...fieldBody.rows].forEach((row) => {\n      row.lastElementChild.remove();\n    });\n\n    updateButtons();\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","fieldBody","document","querySelector","appendRowButton","removeRowButton","appendColumnButton","removeColumnButton","rowCount","rows","columnCount","children","updateButtons","setAttribute","removeAttribute","addEventListener","newRow","cloneNode","append","remove","forEach","row","column","createElement","lastElementChild"],"version":3,"file":"index.5366d7de.js.map"}